/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Asset } from './asset';

export interface PoolDetail { 
    asset?: Asset;
    status?: PoolDetail.StatusEnum;
    /**
     * Price of Asset (in RUNE).
     */
    price?: string;
    /**
     * Total Asset staked
     */
    assetStakedTotal?: string;
    /**
     * Total RUNE staked
     */
    runeStakedTotal?: string;
    /**
     * Rune value staked Total
     */
    poolStakedTotal?: string;
    /**
     * Total current Asset balance
     */
    assetDepth?: string;
    /**
     * Total current Rune balance
     */
    runeDepth?: string;
    /**
     * Total depth of both sides (in RUNE)
     */
    poolDepth?: string;
    /**
     * Total pool units outstanding
     */
    poolUnits?: string;
    /**
     * Total Asset sell volume (ASSET>RUNE) (in RUNE).
     */
    sellVolume?: string;
    /**
     * Total Asset buy volume (RUNE->ASSET) (in Asset)
     */
    buyVolume?: string;
    /**
     * Two-way volume of all-time (in RUNE)
     */
    poolVolume?: string;
    /**
     * Two-way volume in 24hrs (in RUNE)
     */
    poolVolume24hr?: string;
    /**
     * Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
     */
    sellTxAverage?: string;
    /**
     * Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
     */
    buyTxAverage?: string;
    /**
     * Average pool transaction
     */
    poolTxAverage?: string;
    /**
     * Average trade slip for ASSET->RUNE in %
     */
    sellSlipAverage?: string;
    /**
     * Average trade slip for RUNE->ASSET in %
     */
    buySlipAverage?: string;
    /**
     * Average pool slip
     */
    poolSlipAverage?: string;
    /**
     * Average buy Asset fee size for ASSET->RUNE (in RUNE)
     */
    sellFeeAverage?: string;
    /**
     * Average sell Asset fee size for RUNE->ASSET (in ASSET)
     */
    buyFeeAverage?: string;
    /**
     * Average pool fee
     */
    poolFeeAverage?: string;
    /**
     * Total fees (in RUNE)
     */
    sellFeesTotal?: string;
    /**
     * Total fees (in Asset)
     */
    buyFeesTotal?: string;
    /**
     * Total fees
     */
    poolFeesTotal?: string;
    /**
     * Number of ASSET->RUNE transactions
     */
    sellAssetCount?: string;
    /**
     * Number of RUNE->ASSET transactions
     */
    buyAssetCount?: string;
    /**
     * Number of swapping transactions in the pool (buys and sells)
     */
    swappingTxCount?: string;
    /**
     * Number of unique swappers interacting with pool
     */
    swappersCount?: string;
    /**
     * Number of stake transactions
     */
    stakeTxCount?: string;
    /**
     * Number of withdraw transactions
     */
    withdrawTxCount?: string;
    /**
     * Number of stake & withdraw transactions
     */
    stakingTxCount?: string;
    /**
     * Number of unique stakers
     */
    stakersCount?: string;
    /**
     * Asset return on investment
     */
    assetROI?: string;
    /**
     * RUNE return on investment
     */
    runeROI?: string;
    /**
     * Pool ROI (average of RUNE and Asset ROI)
     */
    poolROI?: string;
    /**
     * Pool ROI over 12 months
     */
    poolROI12?: string;
}
export namespace PoolDetail {
    export type StatusEnum = 'bootstrapped' | 'enabled' | 'disabled';
    export const StatusEnum = {
        Bootstrapped: 'bootstrapped' as StatusEnum,
        Enabled: 'enabled' as StatusEnum,
        Disabled: 'disabled' as StatusEnum
    };
}